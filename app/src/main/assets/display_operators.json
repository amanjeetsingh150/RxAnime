{
  "data": [
    {
      "name": "Filtering",
      "operators": [
        {
          "name": "Take(3)",
          "description": "emits only the first n items emitted by an Observable.",
          "link": "http://reactivex.io/documentation/operators/take.html",
          "meta": {
            "condition": "it.data < 3"
          }
        },
        {
          "name": "Filter(even emissions)",
          "description": "emit only those items from an Observable that pass a predicate test.",
          "link": "http://reactivex.io/documentation/operators/filter.html",
          "meta": {
            "condition": "it.data % 2 == 0"
          }
        },
        {
          "name": "Skip(3)",
          "description": "suppress the first n items emitted by an Observable.",
          "link": "http://reactivex.io/documentation/operators/skip.html",
          "meta": {
            "condition": "it.data > 2 "
          }
        },
        {
          "name": "Take Last(2)",
          "description": "emits only the last n items emitted by an Observable.",
          "link": "http://reactivex.io/documentation/operators/takelast.html",
          "meta": {
            "condition": "it.data > 1"
          }
        }
      ]
    },
    {
      "name": "Transforming",
      "operators": [
        {
          "name": "Map(it->it*2)",
          "description": "transforms the items emitted by an Observable by applying a function to each item.",
          "link": "http://reactivex.io/documentation/operators/map.html",
          "meta": {
            "condition": ""
          }
        },
        {
          "name": "Buffer(2)",
          "description": "periodically gather items from an Observable into bundles and emit these bundles rather than emitting the items one at a time.",
          "link": "http://reactivex.io/documentation/operators/buffer.html",
          "meta": {
            "condition": ""
          }
        }
      ]
    }
  ]
}